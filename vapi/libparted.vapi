/* libparted.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Ped", lower_case_cprefix = "ped_")]
namespace Ped {
	[Compact]
	[CCode (free_function = "ped_alignment_destroy", cheader_filename = "parted/parted.h")]
	public class Alignment {
		public weak Ped.Sector grain_size;
		public weak Ped.Sector offset;
		[CCode (has_construct_function = false)]
		public Alignment (Ped.Sector offset, Ped.Sector grain_size);
		public unowned Ped.Sector align_down (Ped.Geometry geom, Ped.Sector sector);
		public unowned Ped.Sector align_nearest (Ped.Geometry geom, Ped.Sector sector);
		public unowned Ped.Sector align_up (Ped.Geometry geom, Ped.Sector sector);
		public unowned Ped.Alignment duplicate ();
		public int init (Ped.Sector offset, Ped.Sector grain_size);
		public unowned Ped.Alignment intersect (Ped.Alignment b);
		public int is_aligned (Ped.Geometry geom, Ped.Sector sector);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class CHSGeometry {
		public int cylinders;
		public int heads;
		public int sectors;
	}
	[Compact]
	[CCode (free_function = "ped_constraint_destroy", cheader_filename = "parted/parted.h")]
	public class Constraint {
		public weak Ped.Alignment end_align;
		public weak Ped.Geometry end_range;
		public weak Ped.Sector max_size;
		public weak Ped.Sector min_size;
		public weak Ped.Alignment start_align;
		public weak Ped.Geometry start_range;
		[CCode (has_construct_function = false)]
		public Constraint (Ped.Alignment start_align, Ped.Alignment end_align, Ped.Geometry start_range, Ped.Geometry end_range, Ped.Sector min_size, Ped.Sector max_size);
		public static unowned Ped.Constraint any (Ped.Device dev);
		public void done ();
		public unowned Ped.Constraint duplicate ();
		public static unowned Ped.Constraint exact (Ped.Geometry geom);
		[CCode (has_construct_function = false)]
		public Constraint.from_max (Ped.Geometry max);
		[CCode (has_construct_function = false)]
		public Constraint.from_min (Ped.Geometry min);
		[CCode (has_construct_function = false)]
		public Constraint.from_min_max (Ped.Geometry min, Ped.Geometry max);
		public int init (Ped.Alignment start_align, Ped.Alignment end_align, Ped.Geometry start_range, Ped.Geometry end_range, Ped.Sector min_size, Ped.Sector max_size);
		public unowned Ped.Constraint intersect (Ped.Constraint b);
		public int is_solution (Ped.Geometry geom);
		public unowned Ped.Geometry solve_max ();
		public unowned Ped.Geometry solve_nearest (Ped.Geometry geom);
	}
	[Compact]
	[CCode (free_function = "ped_device_destroy", cheader_filename = "parted/parted.h")]
	public class Device {
		public void* arch_specific;
		public weak Ped.CHSGeometry bios_geom;
		public int boot_dirty;
		public short did;
		public int dirty;
		public int external_mode;
		public short host;
		public weak Ped.CHSGeometry hw_geom;
		public weak Ped.Sector length;
		public weak string model;
		public weak Ped.Device next;
		public int open_count;
		public weak string path;
		public long phys_sector_size;
		public int read_only;
		public long sector_size;
		public Ped.DeviceType type;
		public int begin_external_access ();
		public void cache_remove ();
		public unowned Ped.Sector check (void* buffer, Ped.Sector start, Ped.Sector count);
		public int close ();
		public int end_external_access ();
		public static void free_all ();
		public static unowned Ped.Device @get (string name);
		public unowned Ped.Constraint get_constraint ();
		public unowned Ped.Constraint get_minimal_aligned_constraint ();
		public unowned Ped.Alignment get_minimum_alignment ();
		public static unowned Ped.Device get_next (Ped.Device device = null);
		public unowned Ped.Constraint get_optimal_aligned_constraint ();
		public unowned Ped.Alignment get_optimum_alignment ();
		public int is_busy ();
		public int open ();
		public static void probe_all ();
		public int read (void* buffer, Ped.Sector start, Ped.Sector count);
		public int sync ();
		public int sync_fast ();
		public int write (void* buffer, Ped.Sector start, Ped.Sector count);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class DeviceArchOps {
		public weak GLib.Callback check;
		public weak GLib.Callback close;
		public weak GLib.Callback destroy;
		public weak GLib.Callback get_minimum_alignment;
		public weak GLib.Callback get_optimum_alignment;
		public weak GLib.Callback is_busy;
		public weak GLib.Callback open;
		public weak GLib.Callback probe_all;
		public weak GLib.Callback read;
		public weak GLib.Callback refresh_close;
		public weak GLib.Callback refresh_open;
		public weak GLib.Callback sync;
		public weak GLib.Callback sync_fast;
		public weak GLib.Callback write;
	}
	[Compact]
	[CCode (free_function = "ped_disk_destroy", cheader_filename = "parted/parted.h")]
	public class Disk {
		public int block_sizes;
		public weak Ped.Device dev;
		public void* disk_specific;
		public int needs_clobber;
		public weak Ped.Partition part_list;
		public weak Ped.DiskType type;
		public int update_mode;
		[CCode (has_construct_function = false)]
		public Disk (Ped.Device dev);
		public int add_partition (Ped.Partition part, Ped.Constraint constraint);
		public int check ();
		public static int clobber (Ped.Device dev);
		public int commit ();
		public int commit_to_dev ();
		public int commit_to_os ();
		public int delete_all ();
		public int delete_partition (Ped.Partition part);
		public unowned Ped.Disk duplicate ();
		public unowned Ped.Partition extended_partition ();
		public static Ped.DiskFlag flag_get_by_name (string name);
		public static unowned string flag_get_name (Ped.DiskFlag flag);
		public static Ped.DiskFlag flag_next (Ped.DiskFlag flag);
		[CCode (has_construct_function = false)]
		public Disk.fresh (Ped.Device dev, Ped.DiskType disk_type);
		public int get_flag (Ped.DiskFlag flag);
		public int get_last_partition_num ();
		public unowned Ped.Geometry get_max_partition_geometry (Ped.Partition part, Ped.Constraint constraint);
		public int get_max_primary_partition_count ();
		public bool get_max_supported_partition_count (int supported);
		public unowned Ped.Partition get_partition (int num);
		public unowned Ped.Alignment get_partition_alignment ();
		public unowned Ped.Partition get_partition_by_sector (Ped.Sector sect);
		public int get_primary_partition_count ();
		public int is_flag_available (Ped.DiskFlag flag);
		public unowned Ped.Sector max_partition_length ();
		public unowned Ped.Sector max_partition_start_sector ();
		public int maximize_partition (Ped.Partition part, Ped.Constraint constraint);
		public int minimize_extended_partition ();
		public unowned Ped.Partition next_partition (Ped.Partition part);
		public void print ();
		public static unowned Ped.DiskType probe (Ped.Device dev);
		public int remove_partition (Ped.Partition part);
		public int set_flag (Ped.DiskFlag flag, int state);
		public int set_partition_geom (Ped.Partition part, Ped.Constraint constraint, Ped.Sector start, Ped.Sector end);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class DiskArchOps {
		public weak GLib.Callback disk_commit;
		public weak GLib.Callback partition_get_path;
		public weak GLib.Callback partition_is_busy;
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class DiskOps {
		public weak GLib.Callback alloc;
		public weak GLib.Callback alloc_metadata;
		public weak GLib.Callback clobber;
		public weak GLib.Callback disk_get_flag;
		public weak GLib.Callback disk_is_flag_available;
		public weak GLib.Callback disk_set_flag;
		public weak GLib.Callback duplicate;
		public weak GLib.Callback free;
		public weak GLib.Callback get_max_primary_partition_count;
		public weak GLib.Callback get_max_supported_partition_count;
		public weak GLib.Callback get_partition_alignment;
		public weak GLib.Callback max_length;
		public weak GLib.Callback max_start_sector;
		public weak GLib.Callback partition_align;
		public weak GLib.Callback partition_check;
		public weak GLib.Callback partition_destroy;
		public weak GLib.Callback partition_duplicate;
		public weak GLib.Callback partition_enumerate;
		public weak GLib.Callback partition_get_flag;
		public weak GLib.Callback partition_get_name;
		public weak GLib.Callback partition_is_flag_available;
		public weak GLib.Callback partition_new;
		public weak GLib.Callback partition_set_flag;
		public weak GLib.Callback partition_set_name;
		public weak GLib.Callback partition_set_system;
		public weak GLib.Callback probe;
		public weak GLib.Callback read;
		public weak GLib.Callback write;
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class DiskType {
		public Ped.DiskTypeFeature features;
		public weak string name;
		public weak Ped.DiskType next;
		public weak Ped.DiskOps ops;
		public int check_feature (Ped.DiskTypeFeature feature);
		public static unowned Ped.DiskType @get (string name);
		public unowned Ped.DiskType get_next ();
		public void register ();
		public void unregister ();
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class Exception {
		public weak string message;
		public Ped.ExceptionOption options;
		public Ped.ExceptionType type;
		public static void @catch ();
		public Ped.ExceptionOption default_handler ();
		public static void fetch_all ();
		public static unowned Ped.ExceptionHandler get_handler ();
		public static unowned string get_option_string (Ped.ExceptionOption ex_opt);
		public static unowned string get_type_string (Ped.ExceptionType ex_type);
		public static void leave_all ();
		public static Ped.ExceptionOption rethrow ();
		public static void set_handler (Ped.ExceptionHandler handler);
		public static Ped.ExceptionOption @throw (Ped.ExceptionType ex_type, Ped.ExceptionOption ex_opt, string message);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class ExceptionHandler {
	}
	[Compact]
	[CCode (copy_function = "ped_file_system_copy", cheader_filename = "parted/parted.h")]
	public class FileSystem {
		public int checked;
		public weak Ped.Geometry geom;
		public weak Ped.FileSystemType type;
		public void* type_specific;
		public int check (Ped.Timer timer);
		public static int clobber (Ped.Geometry geom);
		public int close ();
		public unowned Ped.FileSystem copy (Ped.Geometry geom, Ped.Timer timer);
		public static unowned Ped.FileSystem create (Ped.Geometry geom, Ped.FileSystemType type, Ped.Timer timer);
		public unowned Ped.Constraint get_copy_constraint (Ped.Device dev);
		public static unowned Ped.Constraint get_create_constraint (Ped.FileSystemType fs_type, Ped.Device dev);
		public unowned Ped.Constraint get_resize_constraint ();
		public static unowned Ped.FileSystem open (Ped.Geometry geom);
		public static unowned Ped.FileSystemType probe (Ped.Geometry geom);
		public static unowned Ped.Geometry probe_specific (Ped.FileSystemType fs_type, Ped.Geometry geom);
		public int resize (Ped.Geometry geom, Ped.Timer timer);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class FileSystemAlias {
		public weak string alias;
		public int deprecated;
		public weak Ped.FileSystemType fs_type;
		public weak Ped.FileSystemAlias next;
		public unowned Ped.FileSystemAlias get_next ();
		public static void register (Ped.FileSystemType type, string alias, int deprecated);
		public static void unregister (Ped.FileSystemType type, string alias);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class FileSystemOps {
		public weak GLib.Callback check;
		public weak GLib.Callback clobber;
		public weak GLib.Callback close;
		public weak GLib.Callback copy;
		public weak GLib.Callback create;
		public weak GLib.Callback get_copy_constraint;
		public weak GLib.Callback get_create_constraint;
		public weak GLib.Callback get_resize_constraint;
		public weak GLib.Callback open;
		public weak GLib.Callback probe;
		public weak GLib.Callback resize;
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class FileSystemType {
		public int block_sizes;
		public weak string name;
		public weak Ped.FileSystemType next;
		public weak Ped.FileSystemOps ops;
		public static unowned Ped.FileSystemType @get (string name);
		public unowned Ped.FileSystemType get_next ();
		public void register ();
		public void unregister ();
	}
	[Compact]
	[CCode (free_function = "ped_geometry_destroy", cheader_filename = "parted/parted.h")]
	public struct Geometry {
		public weak Ped.Device dev;
		public weak Ped.Sector end;
		public weak Ped.Sector length;
		public weak Ped.Sector start;
		[CCode (has_construct_function = false)]
		public Geometry (Ped.Device dev, Ped.Sector start, Ped.Sector length);
		public unowned Ped.Sector check (void* buffer, Ped.Sector buffer_size, Ped.Sector offset, Ped.Sector granularity, Ped.Sector count, Ped.Timer timer);
		public unowned Ped.Geometry duplicate ();
		public int init (Ped.Device dev, Ped.Sector start, Ped.Sector length);
		public unowned Ped.Geometry intersect (Ped.Geometry b);
		public unowned Ped.Sector map (Ped.Geometry src, Ped.Sector sector);
		public int read (void* buffer, Ped.Sector offset, Ped.Sector count);
		public int read_alloc (void* buffer, Ped.Sector offset, Ped.Sector count);
		public int @set (Ped.Sector start, Ped.Sector length);
		public int set_end (Ped.Sector end);
		public int set_start (Ped.Sector start);
		public int sync ();
		public int sync_fast ();
		public int test_equal (Ped.Geometry b);
		public int test_inside (Ped.Geometry b);
		public int test_overlap (Ped.Geometry b);
		public int test_sector_inside (Ped.Sector sect);
		public int write (void* buffer, Ped.Sector offset, Ped.Sector count);
	}
	[Compact]
	[CCode (free_function = "ped_partition_destroy", cheader_filename = "parted/parted.h")]
	public class Partition {
		public weak Ped.Disk disk;
		public void* disk_specific;
		public weak Ped.FileSystemType fs_type;
		public weak Ped.Geometry geom;
		public weak Ped.Partition next;
		public int num;
		public weak Ped.Partition part_list;
		public weak Ped.Partition prev;
		public Ped.PartitionType type;
		[CCode (has_construct_function = false)]
		public Partition (Ped.Disk disk, Ped.PartitionType type, Ped.FileSystemType fs_type, Ped.Sector start, Ped.Sector end);
		public static Ped.PartitionFlag flag_get_by_name (string name);
		public static unowned string flag_get_name (Ped.PartitionFlag flag);
		public static Ped.PartitionFlag flag_next (Ped.PartitionFlag flag);
		public int get_flag (Ped.PartitionFlag flag);
		public unowned string get_name ();
		public unowned string get_path ();
		public int is_active ();
		public int is_busy ();
		public int is_flag_available (Ped.PartitionFlag flag);
		public int set_flag (Ped.PartitionFlag flag, int state);
		public int set_name (string name);
		public int set_system (Ped.FileSystemType fs_type);
		public static unowned string type_get_name (Ped.PartitionType part_type);
	}
	[Compact]
	[SimpleType]
	[CCode (cname = "guint64", cheader_filename = "glib.h,parted/parted.h", type_id = "G_TYPE_UINT64", marshaller_type_name = "UINT64", get_value_function = "g_value_get_uint64", set_value_function = "g_value_set_uint64", default_value = "0ULL", type_signature = "t")]
	[IntegerType (rank = 11)]
	public struct Sector {
	}
	[Compact]
	[CCode (free_function = "ped_timer_destroy", cheader_filename = "parted/parted.h")]
	public class Timer {
		public void* context;
		public float frac;
		public weak Ped.TimerHandler handler;
		public ulong now;
		public ulong predicted_end;
		public ulong start;
		public weak string state_name;
		[CCode (has_construct_function = false)]
		public Timer (Ped.TimerHandler handler, void* context);
		public void destroy_nested ();
		[CCode (has_construct_function = false)]
		public Timer.nested (Ped.Timer parent, float nest_frac);
		public void reset ();
		public void set_state_name (string state_name);
		public void touch ();
		public void update (float new_frac);
	}
	[Compact]
	[CCode (cheader_filename = "parted/parted.h")]
	public class TimerHandler {
	}
	[CCode (cprefix = "PED_DEVICE_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum DeviceType {
		UNKNOWN,
		SCSI,
		IDE,
		DAC960,
		CPQARRAY,
		FILE,
		ATARAID,
		I2O,
		UBD,
		DASD,
		VIODASD,
		SX8,
		DM,
		XVD,
		SDMMC,
		VIRTBLK,
		AOE,
		MD
	}
	[CCode (cprefix = "PED_DISK_CYLINDER_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum DiskFlag {
		ALIGNMENT
	}
	[CCode (cprefix = "PED_DISK_TYPE_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum DiskTypeFeature {
		EXTENDED,
		PARTITION_NAME
	}
	[CCode (cprefix = "PED_EXCEPTION_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum ExceptionOption {
		UNHANDLED,
		FIX,
		YES,
		NO,
		OK,
		RETRY,
		IGNORE,
		CANCEL
	}
	[CCode (cprefix = "PED_EXCEPTION_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum ExceptionType {
		INFORMATION,
		WARNING,
		ERROR,
		FATAL,
		BUG,
		NO_FEATURE
	}
	[CCode (cprefix = "PED_PARTITION_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum PartitionFlag {
		BOOT,
		ROOT,
		SWAP,
		HIDDEN,
		RAID,
		LVM,
		LBA,
		HPSERVICE,
		PALO,
		PREP,
		MSFT_RESERVED,
		BIOS_GRUB,
		APPLE_TV_RECOVERY,
		DIAG
	}
	[CCode (cprefix = "PED_PARTITION_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum PartitionType {
		NORMAL,
		LOGICAL,
		EXTENDED,
		FREESPACE,
		METADATA,
		PROTECTED
	}
	[CCode (cprefix = "PED_UNIT_", has_type_id = false, cheader_filename = "parted/parted.h")]
	public enum Unit {
		SECTOR,
		BYTE,
		KILOBYTE,
		MEGABYTE,
		GIGABYTE,
		TERABYTE,
		COMPACT,
		CYLINDER,
		CHS,
		PERCENT,
		KIBIBYTE,
		MEBIBYTE,
		GIBIBYTE,
		TEBIBYTE
	}
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_IGNORE_CANCEL;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_OK_CANCEL;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_RETRY_CANCEL;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_RETRY_IGNORE_CANCEL;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_YES_NO;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int EXCEPTION_YES_NO_CANCEL;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int GIBIBYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int GIGABYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int KIBIBYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int KILOBYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int MEBIBYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int MEGABYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int SECTOR_SIZE_DEFAULT;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int TEBIBYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public const int TERABYTE_SIZE;
	[CCode (cheader_filename = "parted/parted.h")]
	public static void* calloc (size_t size);
	[CCode (cname = "free", cheader_filename = "parted/parted.h")]
	public static void free (void* ptr);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string get_version ();
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned Ped.Sector greatest_common_divisor (Ped.Sector a, Ped.Sector b);
	[CCode (cheader_filename = "parted/parted.h")]
	public static void* malloc (size_t size);
	[CCode (cheader_filename = "parted/parted.h")]
	public static int realloc (void* ptr, size_t size);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned Ped.Sector round_down_to (Ped.Sector sector, Ped.Sector grain_size);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned Ped.Sector round_to_nearest (Ped.Sector sector, Ped.Sector grain_size);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned Ped.Sector round_up_to (Ped.Sector sector, Ped.Sector grain_size);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string unit_format (Ped.Device dev, Ped.Sector sector);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string unit_format_byte (Ped.Device dev, Ped.Sector byte);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string unit_format_custom (Ped.Device dev, Ped.Sector sector, Ped.Unit unit);
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string unit_format_custom_byte (Ped.Device dev, Ped.Sector byte, Ped.Unit unit);
	[CCode (cheader_filename = "parted/parted.h")]
	public static Ped.Unit unit_get_by_name (string unit_name);
	[CCode (cheader_filename = "parted/parted.h")]
	public static Ped.Unit unit_get_default ();
	[CCode (cheader_filename = "parted/parted.h")]
	public static unowned string unit_get_name (Ped.Unit unit);
	[CCode (cheader_filename = "parted/parted.h")]
	public static long unit_get_size (Ped.Device dev, Ped.Unit unit);
	[CCode (cheader_filename = "parted/parted.h")]
	public static int unit_parse (string str, Ped.Device dev, Ped.Sector sector, out unowned Ped.Geometry range);
	[CCode (cheader_filename = "parted/parted.h")]
	public static int unit_parse_custom (string str, Ped.Device dev, Ped.Unit unit, Ped.Sector sector, out unowned Ped.Geometry range);
	[CCode (cheader_filename = "parted/parted.h")]
	public static void unit_set_default (Ped.Unit unit);
}
